{
  "resolvedId": "/Volumes/Data/playground/vite/ssr-kit-unocss/pages/star-wars/@id.page.tsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import React from 'react'\nimport fetch from 'cross-fetch'\nimport { filterMovieData } from './filterMovieData'\nimport type { PageContextBuiltIn } from 'vite-plugin-ssr'\nimport type { MovieDetails } from './types'\n\nexport { Page }\nexport { onBeforeRender }\n\nfunction Page({ movie }: { movie: MovieDetails }) {\n  return (\n    <>\n      <h1>{movie.title}</h1>\n      Release Date: {movie.release_date}\n      <br />\n      Director: {movie.director}\n      <br />\n      Producer: {movie.producer}\n    </>\n  )\n}\n\nasync function onBeforeRender(pageContext: PageContextBuiltIn) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${pageContext.routeParams.id}.json`)\n  let movie = (await response.json()) as MovieDetails\n\n  // We remove data we don't need because we pass `pageContext.movie` to\n  // the client; we want to minimize what is sent over the network.\n  movie = filterMovieData(movie)\n\n  const { title } = movie\n\n  return {\n    pageContext: {\n      pageProps: {\n        movie\n      },\n      documentProps: {\n        // The page's <title>\n        title\n      }\n    }\n  }\n}\n",
      "start": 1684669401186,
      "end": 1684669401255
    },
    {
      "name": "unocss:transformers:pre",
      "result": "import React from 'react';\nimport fetch from 'cross-fetch';\nimport { filterMovieData } from './filterMovieData';\nexport { Page };\nexport { onBeforeRender };\nfunction Page({\n  movie\n}) {\n  return <>\n      <h1>{movie.title}</h1>\n      Release Date: {movie.release_date}\n      <br />\n      Director: {movie.director}\n      <br />\n      Producer: {movie.producer}\n    </>;\n}\nasync function onBeforeRender(pageContext) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${pageContext.routeParams.id}.json`);\n  let movie = await response.json();\n\n  // We remove data we don't need because we pass `pageContext.movie` to\n  // the client; we want to minimize what is sent over the network.\n  movie = filterMovieData(movie);\n  const {\n    title\n  } = movie;\n  return {\n    pageContext: {\n      pageProps: {\n        movie\n      },\n      documentProps: {\n        // The page's <title>\n        title\n      }\n    }\n  };\n}",
      "start": 1684669401255,
      "end": 1684669401270,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "result": "import { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport fetch from \"cross-fetch\";\nimport { filterMovieData } from \"./filterMovieData\";\nexport { Page };\nexport { onBeforeRender };\nfunction Page({\n  movie\n}) {\n  return /* @__PURE__ */ jsxs(Fragment, { children: [\n    /* @__PURE__ */ jsx(\"h1\", { children: movie.title }),\n    \"Release Date: \",\n    movie.release_date,\n    /* @__PURE__ */ jsx(\"br\", {}),\n    \"Director: \",\n    movie.director,\n    /* @__PURE__ */ jsx(\"br\", {}),\n    \"Producer: \",\n    movie.producer\n  ] });\n}\nasync function onBeforeRender(pageContext) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${pageContext.routeParams.id}.json`);\n  let movie = await response.json();\n  movie = filterMovieData(movie);\n  const {\n    title\n  } = movie;\n  return {\n    pageContext: {\n      pageProps: {\n        movie\n      },\n      documentProps: {\n        // The page's <title>\n        title\n      }\n    }\n  };\n}\n",
      "start": 1684669401270,
      "end": 1684669401348,
      "order": "normal"
    }
  ]
}
