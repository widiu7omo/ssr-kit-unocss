{
  "resolvedId": "/Volumes/Data/playground/vite/ssr-kit-unocss/pages/star-wars/index/index.page.server.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import fetch from \"cross-fetch\";\nimport { filterMovieData } from \"../filterMovieData\";\nimport type { Movie, MovieDetails } from \"../types\";\n\nexport { onBeforeRender };\nexport { prerender };\n\nasync function onBeforeRender() {\n  await sleep(700); // Simulate slow network\n  const movies = await getStarWarsMovies();\n  return {\n    pageContext: {\n      pageProps: {\n        // We remove data we don't need because we pass `pageContext.movies` to\n        // the client; we want to minimize what is sent over the network.\n        movies: filterMoviesData(movies),\n      },\n      // The page's <title>\n      documentProps: { title: getTitle(movies) },\n    },\n  };\n}\n\nasync function getStarWarsMovies(): Promise<MovieDetails[]> {\n  const response = await fetch(\"https://star-wars.brillout.com/api/films.json\");\n  let movies: MovieDetails[] = ((await response.json()) as any).results;\n  movies = movies.map((movie: MovieDetails, i: number) => ({\n    ...movie,\n    id: String(i + 1),\n  }));\n  return movies;\n}\n\nfunction filterMoviesData(movies: MovieDetails[]): Movie[] {\n  return movies.map((movie: MovieDetails) => {\n    const { title, release_date, id } = movie;\n    return { title, release_date, id };\n  });\n}\n\nasync function prerender() {\n  const movies = await getStarWarsMovies();\n\n  return [\n    {\n      url: \"/star-wars\",\n      // We already provide `pageContext` here so that `vite-plugin-ssr`\n      // will *not* have to call the `onBeforeRender()` hook defined\n      // above in this file.\n      pageContext: {\n        pageProps: {\n          movies: filterMoviesData(movies),\n        },\n        documentProps: { title: getTitle(movies) },\n      },\n    },\n    ...movies.map((movie) => {\n      const url = `/star-wars/${movie.id}`;\n      return {\n        url,\n        // Note that we can also provide the `pageContext` of other pages.\n        // This means that `vite-plugin-ssr` will not call any\n        // `onBeforeRender()` hook and the Star Wars API will be called\n        // only once (in this `prerender()` hook).\n        pageContext: {\n          pageProps: {\n            movie: filterMovieData(movie),\n          },\n          documentProps: { title: movie.title },\n        },\n      };\n    }),\n  ];\n}\n\nfunction getTitle(movies: Movie[] | MovieDetails[]): string {\n  const title = `${movies.length} Star Wars Movies`;\n  return title;\n}\n\nfunction sleep(milliseconds: number): Promise<void> {\n  return new Promise((r) => setTimeout(r, milliseconds));\n}\n",
      "start": 1684669401186,
      "end": 1684669401288
    },
    {
      "name": "vite:esbuild",
      "result": "import fetch from \"cross-fetch\";\nimport { filterMovieData } from \"../filterMovieData\";\nexport { onBeforeRender };\nexport { prerender };\nasync function onBeforeRender() {\n  await sleep(700);\n  const movies = await getStarWarsMovies();\n  return {\n    pageContext: {\n      pageProps: {\n        // We remove data we don't need because we pass `pageContext.movies` to\n        // the client; we want to minimize what is sent over the network.\n        movies: filterMoviesData(movies)\n      },\n      // The page's <title>\n      documentProps: { title: getTitle(movies) }\n    }\n  };\n}\nasync function getStarWarsMovies() {\n  const response = await fetch(\"https://star-wars.brillout.com/api/films.json\");\n  let movies = (await response.json()).results;\n  movies = movies.map((movie, i) => ({\n    ...movie,\n    id: String(i + 1)\n  }));\n  return movies;\n}\nfunction filterMoviesData(movies) {\n  return movies.map((movie) => {\n    const { title, release_date, id } = movie;\n    return { title, release_date, id };\n  });\n}\nasync function prerender() {\n  const movies = await getStarWarsMovies();\n  return [\n    {\n      url: \"/star-wars\",\n      // We already provide `pageContext` here so that `vite-plugin-ssr`\n      // will *not* have to call the `onBeforeRender()` hook defined\n      // above in this file.\n      pageContext: {\n        pageProps: {\n          movies: filterMoviesData(movies)\n        },\n        documentProps: { title: getTitle(movies) }\n      }\n    },\n    ...movies.map((movie) => {\n      const url = `/star-wars/${movie.id}`;\n      return {\n        url,\n        // Note that we can also provide the `pageContext` of other pages.\n        // This means that `vite-plugin-ssr` will not call any\n        // `onBeforeRender()` hook and the Star Wars API will be called\n        // only once (in this `prerender()` hook).\n        pageContext: {\n          pageProps: {\n            movie: filterMovieData(movie)\n          },\n          documentProps: { title: movie.title }\n        }\n      };\n    })\n  ];\n}\nfunction getTitle(movies) {\n  const title = `${movies.length} Star Wars Movies`;\n  return title;\n}\nfunction sleep(milliseconds) {\n  return new Promise((r) => setTimeout(r, milliseconds));\n}\n",
      "start": 1684669401289,
      "end": 1684669401348,
      "order": "normal"
    }
  ]
}
